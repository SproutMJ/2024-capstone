/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/xxZQctyMK7c
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Libre_Franklin } from 'next/font/google'

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client';
import { useRouter } from 'next/navigation';
import axios from 'axios';
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { CardTitle, CardHeader, CardContent, CardFooter, Card } from "@/components/ui/card"
import { Header } from "@/components/ui/header";
import React, { useEffect, useState } from "react";
import { TrashIcon } from "lucide-react";

type ChatRoom = {
  menu: string;
  chatId: number;
  createdAt: string;
};

export default function Main() {
  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);
  const [selectedChatRoom, setSelectedChatRoom] = useState<number | null>(null);
  const router = useRouter();

  useEffect(() => {
    const fetchChatRooms = async () => {
      try {
        const response = await axios.get(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/chatrooms`);
        setChatRooms(response.data);
      } catch (error) {
        console.error("Error fetching chat rooms:", error);
      }
    };

    fetchChatRooms();
  }, []);

  const handleChatRoomClick = (chatId: number) => {
    setSelectedChatRoom(chatId);
    router.push(`/chatroom/${chatId}`);
  };

  const handleDeleteClick = async (chatId: number) => {
    try {
      await axios.delete(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/chatroom/${chatId}`);
      setChatRooms(chatRooms.filter(chat => chat.chatId !== chatId));
    } catch (error) {
      console.error("Error deleting chat room:", error);
    }
  };

  return (
      <>
        <Header></Header>
        <main className="py-8">
          <div className="container mx-auto px-4">
            <div className="grid grid-cols-1 gap-6">
              {chatRooms.map((chat, index) => (
                  <Card key={index}>
                    <CardHeader>
                      <CardTitle>{chat.menu}</CardTitle>
                    </CardHeader>
                    <CardContent>
                      {/* Display chat details if selectedChatRoom matches */}
                    </CardContent>
                    <CardFooter className="flex justify-between">
                      <Button variant="outline" onClick={() => handleChatRoomClick(chat.chatId)}>
                        채팅방 보기
                      </Button>
                      <Button variant="outline" className="text-red-500 border-red-500"
                              onClick={() => handleDeleteClick(chat.chatId)}>
                        <TrashIcon className="h-6 w-6" />
                      </Button>
                    </CardFooter>
                  </Card>
              ))}
            </div>
          </div>
          <div className="fixed bottom-6 right-6">
            <Button size="lg">
              <Link href={"/recommend"}>
                <PlusIcon className="h-6 w-6" />
                <span className="sr-only">Add new</span>
              </Link>
            </Button>
          </div>
        </main>
      </>
  )
}

function PlusIcon(props: any) {
  return (
      <svg
          {...props}
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
      >
        <path d="M5 12h14" />
        <path d="M12 5v14" />
      </svg>
  )
}
