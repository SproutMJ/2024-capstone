/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/V0jUKKZKq7P
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

 import { Libre_Franklin } from 'next/font/google'

 libre_franklin({
 subsets: ['latin'],
 display: 'swap',
 })

 To read more about using these font, please visit the Next.js documentation:
 - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
 - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
 **/
'use client'
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Textarea } from "@/components/ui/textarea"
import {Header} from "@/components/ui/header";
import {useRouter} from "next/navigation";
import {useEffect, useState} from "react";
import axios from "axios";

type Comment = {
  id: number;
  name: string;
  content: string;
};

export default function BoardDetail({params}: {params: {boardId: string}}) {
  const id = params.boardId;
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [createdTime, setCreatedTime] = useState('');
  const [author, setAuthor] = useState('');
  const [comment, setComment] = useState('');
  const [comments, setComments] = useState<Comment[]>([]);

  useEffect(()=>{
    const fetchBoard = async ()=> {
      const response = await axios.get(`/api/boards/${params.boardId}`);
      setTitle(response.data.title);
      setContent(response.data.content);
      setCreatedTime(response.data.createdTime);
      setAuthor(response.data.author);
    };

    fetchBoard();
    fetchComment();
  },[]);

  const fetchComment = async () => {
    const response = await axios.get(`/api/comments/${params.boardId}`);
    setComments(response.data.map((c: Comment)=>(c)));
  }

  const addComment = async () =>{
    const commentDto = {
      boardId: id,
      content: comment,
    }
    const response = await axios.post('/api/comments', commentDto);
    setComment('');
    fetchComment();
  }

  return (
      <>
        <Header></Header>
        <main className="py-8">
          <div className="container mx-auto px-4">
            <div>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6" />
            </div>
            <div className="mt-8">
              <div className="bg-white dark:bg-gray-900 rounded-lg shadow-md p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-4">
                    <img
                        alt="Avatar"
                        className="rounded-full"
                        height={40}
                        src="/placeholder.svg"
                        style={{
                          aspectRatio: "40/40",
                          objectFit: "cover",
                        }}
                        width={40}
                    />
                    <div>
                      <h3 className="font-medium text-gray-900 dark:text-gray-100">{author}</h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">{createdTime}</p>
                    </div>
                  </div>
                </div>
                <div className="mb-4">
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                    {title}
                  </h2>
                  <p className="text-gray-700 dark:text-gray-400">
                    {content}
                  </p>
                </div>
                <div className="mb-4">
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">댓글</h3>
                  <div className="space-y-4">
                    {comments.map((comment, index)=> (
                        <div className="flex items-start space-x-4">
                          <img
                              alt="Avatar"
                              className="rounded-full"
                              height={40}
                              src="/placeholder.svg"
                              style={{
                                aspectRatio: "40/40",
                                objectFit: "cover",
                              }}
                              width={40}
                          />
                          <div>
                            <h4 className="font-medium text-gray-900 dark:text-gray-100">{comment.name}</h4>
                            <p className="text-gray-700 dark:text-gray-400">
                              {comment.content}
                            </p>
                          </div>
                        </div>
                    ))}
                  </div>
                </div>
                <div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">댓글을 남겨주세요</h3>
                  <div className="flex items-start space-x-4">
                    <img
                        alt="Avatar"
                        className="rounded-full"
                        height={40}
                        src="/placeholder.svg"
                        style={{
                          aspectRatio: "40/40",
                          objectFit: "cover",
                        }}
                        width={40}
                    />
                    <div className="flex-1">
                      <Textarea onChange={(e) => (setComment(e.target.value))} value={comment} className="mb-2"
                                placeholder=""/>
                      <div className="flex items-center justify-end">
                        <Button onClick={addComment}>작성</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="fixed bottom-6 right-6"/>
        </main>
      </>
  )
}