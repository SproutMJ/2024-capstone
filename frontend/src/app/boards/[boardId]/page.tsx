/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/V0jUKKZKq7P
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

 import { Libre_Franklin } from 'next/font/google'

 libre_franklin({
 subsets: ['latin'],
 display: 'swap',
 })

 To read more about using these font, please visit the Next.js documentation:
 - App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
 - Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
 **/
'use client'
import { Button } from "@/components/ui/button"
import Link from "next/link"
import { Textarea } from "@/components/ui/textarea"
import {Header} from "@/components/ui/header";
import {useRouter} from "next/navigation";
import React, {useCallback, useEffect, useState} from "react";
import axios from "axios";
import useUserStore from "@/store/useUserStore";
import {DeleteIcon, ScissorsIcon} from "lucide-react";
import Image from "next/image";
// @ts-ignore
import Modal from "react-modal";

type Comment = {
  id: number;
  name: string;
  content: string;
};

export default function BoardDetail({params}: {params: {boardId: string}}) {
  const boardId = params.boardId;
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [createdTime, setCreatedTime] = useState('');
  const [author, setAuthor] = useState('');
  const [comment, setComment] = useState('');
  const [comments, setComments] = useState<Comment[]>([]);
  const {getState} = useUserStore;
  const [modifyComment, setModifyComment] = useState('');
  const [currentModifyCommentId, setCurrentModifyCommentId] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const router = useRouter();

  const fetchComment = useCallback(async () => {
    const response = await axios.get(`/api/comments/${params.boardId}`);
    setComments(response.data.map((c: Comment) => (c)));
  }, [params.boardId]);

  useEffect(() => {
    const fetchBoard = async () => {
      const response = await axios.get(`/api/boards/${params.boardId}`);
      setTitle(response.data.title);
      setContent(response.data.content);
      setCreatedTime(response.data.createdTime);
      setAuthor(response.data.author);
    };

    fetchBoard();
    fetchComment();
  }, [params.boardId, fetchComment]);

  const addComment = async () => {
    const commentDto = {
      boardId: boardId,
      content: comment,
    }
    const response = await axios.post('/api/comments', commentDto);
    setComment('');
    await fetchComment();
  }

  const modifyCommentWindowOpen = (id: number, commentVal: string) => {
    setModifyComment(commentVal);
    setCurrentModifyCommentId(id);
  }

  const handleModifyComment = async () => {
    const commentDto = {
      id: currentModifyCommentId,
      content: modifyComment,
    }

    const response = await axios.patch('/api/comments', commentDto);
    await fetchComment();
    restoreModifyComment();
  }

  const restoreModifyComment = () => {
    setCurrentModifyCommentId(null);
  }

  const handleDeleteComment = async (id: number) => {
    const response = await axios.delete(`/api/comments/${id}`);
    await fetchComment();
  }

  const handleDeleteBoard = async () => {
    const response = await axios.delete(`/api/boards/${boardId}`);
    closeModal();
    await router.push('/boards');
  }

  const openModal = () => {
    setIsModalOpen(true);
  };

  const closeModal = () => {
    setIsModalOpen(false);
  };

  return (
      <>
        <Header></Header>
        <main className="py-8">
          <div className="container mx-auto px-4">
            <div>
              <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6"/>
            </div>
            <div className="mt-8">
              <div className="bg-white dark:bg-gray-900 rounded-lg shadow-md p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-4">
                    <Image
                        alt="Avatar"
                        className="rounded-full"
                        height={40}
                        src="/placeholder.svg"
                        style={{
                          aspectRatio: "40/40",
                          objectFit: "cover",
                        }}
                        width={40}
                    />
                    <div>
                      <h3 className="font-medium text-gray-900 dark:text-gray-100">{author}</h3>
                      <p className="text-sm text-gray-500 dark:text-gray-400">{createdTime}</p>
                    </div>
                  </div>
                  <div className="flex items-center space-x-1">
                    {getState().user?.userName === author && (
                        <Link href={`/boards/modify/${boardId}`}>
                          <Button variant="outline">
                            <ScissorsIcon className="h-5 w-5"/>
                          </Button>
                        </Link>
                    )}
                    {getState().user?.userName === author && (
                        <Button onClick={openModal} className="text-red-500 border-red-500" variant="outline">
                          <DeleteIcon className="h-5 w-5"/>
                        </Button>
                    )}
                  </div>
                </div>
                <hr className="mb-1"/>
                <div className="mb-4">
                  <h2 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
                    {title}
                  </h2>
                  <div dangerouslySetInnerHTML={{__html: content.replace(/\n/g, '<br/>')}}/>
                </div>
                <hr className="mb-1"/>
                <div className="mb-4">
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">댓글</h3>
                  <div className="space-y-4">
                    {comments.map((comment, index) => (
                        <div key={index} className="flex items-start space-x-4">
                          <Image
                              alt="Avatar"
                              className="rounded-full"
                              height={40}
                              src="/placeholder.svg"
                              style={{
                                aspectRatio: "40/40",
                                objectFit: "cover",
                              }}
                              width={40}
                          />
                          <div className="flex-1">
                            <h4 className="font-medium text-gray-900 dark:text-gray-100">{comment.name}</h4>
                            {currentModifyCommentId !== comment.id && (
                                <div className="flex items-center justify-between">
                                  <p className="text-gray-700 dark:text-gray-400">
                                    {comment.content}
                                  </p>
                                  <div className="flex items-center space-x-1 ml-auto">
                                    {getState().user?.userName === comment.name && (
                                        <Button onClick={() => modifyCommentWindowOpen(comment.id, comment.content)}
                                                variant="outline">
                                          수정
                                        </Button>
                                    )}
                                    {getState().user?.userName === comment.name && (
                                        <Button className="text-red-500 border-red-500" variant="outline"
                                                onClick={() => handleDeleteComment(comment.id)}>
                                          삭제
                                        </Button>
                                    )}
                                  </div>
                                </div>
                            )}
                            {currentModifyCommentId === comment.id && (
                                <div className="flex-1">
                                  <Textarea
                                      className="mb-2 w-full"
                                      onChange={(e) => setModifyComment(e.target.value)}
                                      value={modifyComment}
                                  />
                                  <div className="flex items-center justify-end space-x-2">
                                    <Button onClick={restoreModifyComment}>취소</Button>
                                    <Button onClick={handleModifyComment}>수정</Button>
                                  </div>
                                </div>
                            )}
                          </div>
                        </div>
                    ))}
                  </div>
                </div>

                <hr className="mb-1"/>
                <div>
                  <h3 className="text-lg font-medium text-gray-900 dark:text-gray-100 mb-2">댓글을 남겨주세요</h3>
                  <div className="flex items-start space-x-4">
                    <Image
                        alt="Avatar"
                        className="rounded-full"
                        height={40}
                        src="/placeholder.svg"
                        style={{
                          aspectRatio: "40/40",
                          objectFit: "cover",
                        }}
                        width={40}
                    />
                    <div className="flex-1">
                      <Textarea onChange={(e) => (setComment(e.target.value))} value={comment} className="mb-2"
                                placeholder=""/>
                      <div className="flex items-center justify-end">
                        <Button onClick={addComment}>작성</Button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div className="fixed bottom-6 right-6"/>
          {/* 삭제 확인 모달 */}
          <Modal
              isOpen={isModalOpen}
              onRequestClose={closeModal}
              contentLabel="레시피 삭제 확인"
              className="fixed inset-0 flex items-center justify-center z-50 outline-none"
              overlayClassName="fixed inset-0 bg-black bg-opacity-70 z-40"
          >
            {/* 모달 내부 스타일을 JSX 내에서 설정 */}
            <div style={{
              backgroundColor: "#333", /* 검은색 배경색 */
              color: "#fff", /* 텍스트 색상 */
              padding: "20px", /* 내부 간격 설정 */
              borderRadius: "8px" /* 모서리 둥글게 설정 */
            }}>
              <h2 className="text-lg font-semibold mb-4">정말 삭제하시겠습니까?</h2>
              <div className="flex justify-end mt-4">
                <Button variant="outline" onClick={closeModal}>취소</Button>
                <Button variant="outline" className="ml-2 text-red-500 border-red-500" onClick={handleDeleteBoard}>네</Button>
              </div>
            </div>
          </Modal>
        </main>
      </>
  )
}